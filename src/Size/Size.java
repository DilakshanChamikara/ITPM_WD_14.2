/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Size;

import Home.Home;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author KAVINDI
 */
public class Size extends javax.swing.JFrame {

    /**
     * Creates new form Size
     */
    public Size() {
        initComponents();
        jTable2.setModel(new DefaultTableModel(null, new String[]{"Line no","Program statements","Tokens identified under the size factor","Nkw","Nid","Nop","Nav","Nsl","Cs"}));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jComboBox2 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1480, 1000));

        jPanel1.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel1.setPreferredSize(new java.awt.Dimension(1480, 38));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addGap(56, 56, 56))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 15, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jButton1.setText("Home");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel2.setPreferredSize(new java.awt.Dimension(1480, 128));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("CDE IT SOLUTIONS");
        jLabel1.setToolTipText("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(jLabel2)
                        .addGap(469, 469, 469)
                        .addComponent(jLabel1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 1547, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel3.setPreferredSize(new java.awt.Dimension(1399, 900));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Complexity of a program due to Size");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "----Select Language---", "JAVA", "C++" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton9.setText("Browse");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Analyse");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Line no", "Program statements", "Tokens identified under the size factor", "Nkw", "Nid", "Nop", "Nnv", "Nsl", "Cs"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(151, 151, 151)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel3)
                .addGap(32, 32, 32)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(jButton10)
                .addContainerGap(123, Short.MAX_VALUE))
        );

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Analyse--", "Variables", "Inheritance ", "Coupling", "Control Structure", "Size", " " }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 2108, Short.MAX_VALUE)
                .addGap(89, 89, 89))
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 2186, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(799, 799, 799))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    File f =null;
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        
        Home H4 = new Home();
        H4.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        
        
         JFileChooser chooser = new JFileChooser();
         chooser.showOpenDialog(null);
//         File f =chooser.getSelectedFile();
           f =chooser.getSelectedFile();
         String filename=f.getAbsolutePath();
         
         
        try
        {
            FileReader reader = new FileReader(filename);
            BufferedReader br = new BufferedReader(reader);
            jTextArea1.read (br,null);
            br.close();
            jTextArea1.requestFocus();
        }
        
       catch(Exception e){
           JOptionPane.showMessageDialog(null, e);
       }
    }//GEN-LAST:event_jButton9ActionPerformed

//    public void Test()
//    {
//            File file=new File("Demo.txt");    //creates a new file instance  
//FileReader fr=new FileReader(file);   //reads the file  
//BufferedReader br=new BufferedReader(fr);  //creates a buffering character input stream  
//StringBuffer sb=new StringBuffer();    //constructs a string buffer with no characters  
//String line;  
//while((line=br.readLine())!=null)  
//{  
//sb.append(line);      //appends line to string buffer  
//sb.append("\n");     //line feed   
//}  
//fr.close();    //closes the stream and release the resources  
//System.out.println("Contents of File: ");  
//System.out.println(sb.toString());   //returns a string that textually represents the object  
//    }
    
      public void ShowData(String [][] ShowLine){
        
        DefaultTableModel model =  (DefaultTableModel) jTable2.getModel();
        
        String[] cols = {"Line no","Program statements","Tokens identified under the size factor","Nkw","Nid","Nop","Nav","Nsl","Cs"};
        
        String [][] data = ShowLine;
//        String [][] data = {
//                              {"1","import java.awt.event.*;","","","","","","0"},
//                              {"2","import java.awt.*;","","","","","","","0"},
//                              {"3","","","","","","","",""},
//                              {"4","    public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {","public, class, JumpingBox, extends, java, ., applet, ., Applet, implements, MouseListener, ,, MouseMotionListener, ,, ComponentListener","4","7","4","","","15"},
//                              {"5","    private int mx, my;","private,","1","","1","","","2"},
//                              {"6","    private Dimension size;","private","1","","","","","1"},
//                              {"7","    private int onaroll;","private","1","","","","","1"},
//                              {"8","    public void init() {","public,void, init( )","2","1","","","","3"},
//                              {"9","         onaroll = 0;","onaroll, =,  0","","1","1","1","","3"},
//                              {"10","        setSize(500, 500);","setSize( ), 500,  ,,  500)","","1","1","2","","4"},
//                              {"11","        size = getSize();","size, =,  getSize( )","","2","1","","","3"},
//                              {"12","        addMouseListener(this);","addMouseListener( ), this","1","1","","","","2"},
//                              {"13","        addMouseMotionListener(this);","addMouseMotionListener( ), this","1","1","","","","2"},
//                              {"14","        addComponentListener(this);","addComponentListener( ), this","1","1","","","","2"},
//                              {"15","    }","","","","","","","0"},
//                              {"16","    public void update(Graphics g) {","addComponentListener( ), this","2","1","","","","3"},
//                              {"17","        Dimension newSize = getSize();"," =,  getSize( )","","1","1","","","2"},
//                              {"18","        if (size.equals(newSize)) {   // Erase old box","size, ., equals( ), newSize","","3","1","","","4"},
//                              {"19","            g.setColor(getBackground());","g, ., setColor( ), getBackground( )","","3","1","","","4"},
//                              {"20","            g.drawRect(mx, my, (size.width / 10) - 1, (size.height / 10) - 1);","g, ., drawRect( ), mx, ,, my, ,, size, ., width, /, 10,  -,  1,   ,,   size,  .,  height,   /,  10,  -, 1","","8","10","4","","22"},
//                              {"21","        } else {","else","1","","","","","1"},
//                              {"22","            size = newSize;","size, =,  newSize","","2","1","","","3"},
//                              {"23","            g.clearRect(0, 0, size.width, size.height);}","g,  ., clearRect( ),  0,  ,, 0,  ,,  size, ., width,  ,,  size , .,  height","","6","6","2","","14"},
//                              {"24","        // Calculate new position","","","","","","","0"},
//                              {"25","        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));","mx, =,  Math, ., random( ), *, 1000,  % , size, ., width, -, size, ., width, /, 10","","7","8","2","","17"},
//                              {"26","        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));","mx, =,  Math, ., random( ), *, 1000,  % , size, ., height, -, size, ., height, /, 10","","7","8","2","","17"},
//                              {"27","        paint(g);","paint( ),  g","","2","","","","2"},
//                              {"28","   }","","","","","","","0"},
//                              {"29","    public void paint(Graphics g) {","public, void,  paint","2","1","","","","3"},
//                              {"30","        g.setColor(Color.black);","g,  .,  setColor( ), Color, ., black","","4","2","","","6"},
//                              {"31","        g.drawRect(0, 0, size.width - 1, size.height - 1);","g,  .,  drawRect( ),  0,  ,,  0, size,  ., width,  -, 1, ,, size,  .,  height,   -,  1","","6","8","4","","18"},
//                              {"32","        g.drawRect(mx, my, (size.width / 10) - 1, (size.height / 10) - 1);","g,  .,  drawRect( ), mx, ,,  my,  ,,  size,  .,  width,  /,  10,  -,  1,  ,,  size,  .,  height,   /,  10,  -, 1","","8","10","4","","22"},
//                              {"33","   }","}","","","","","","0"},
//                              {"34","    public void mouseDragged(MouseEvent e) {}","public, void,  mouseDragged( )","2","1","","","","3"},
//                              {"35","    public void mouseMoved(MouseEvent e) {","public, void,  mouseMoved( )","2","1","","","","3"},
//                              {"36","        e.consume();","e,  .,  consume( )","","2","1","","","3"},
//                              {"37","        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {","e,  .,  getX( ),   %,  3,  ==,  0,  &&,  e,  .,  getY( ),  %,  3,  ==,  0","","4","7","4","","15"},
//                              {"38","            repaint();","repaint( )","","1","","","","1"},
//                              {"39","        }}","","","","","","","0"},
//                              {"40","    public void mousePressed(MouseEvent e) {","public, void, mousePressed( )","2","1","","","","3"},
//                              {"41","        int x = e.getX()"," =,  e,  .,  getX( )","","2","2","","","4"},
//                              {"42","       int y = e.getY()"," =,  e,  .,  getY( )","","2","2","","","4"},
//                              {"43","        e.consume();","e,  .,  consume( )","","2","1","","","3"},
//                              {"44","        requestFocus();","requestFocus( )","","1","","","","1"},
//                              {"45","        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) { //determine if hit","mx,  <,  x,  &&,  x, <,  mx,  +,  getSize( ),  ., width,  /, 10, -, 1, &&, my, <,  y, &&,  y, <, my, +, getSize( ),  ., height,  /,  10,  -, 1","","12","15","4","","31"},
//                              {"46","            if (onaroll > 0) {   //not first hit","onaroll,  >,  0","","1","1","1","","3"},
//                              {"47","               switch (onaroll%4) {   //play a sound","onaroll,  %,  4","","1","1","1","","3"},
//                              {"48","                case 0:","0","","","","1","","1"},
//                              {"49","                    play(getCodeBase(), \"sounds/tiptoe.thru.the.tulips.au\");","play( ),  getCodeBase( ),  ,,  \"sounds/tiptoe.thru.the.tulips.au\"","","2","1","","1","4"},
//                              {"50","                    break;","break","1","","","","","1"},
//                              {"51","import java.awt.event.*;","","","","","","0"},
//                              {"52","import java.awt.*;","","","","","","","0"},
//                              {"53","","","","","","","",""},
//                              {"54","    public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {","public, class, JumpingBox, extends, java, ., applet, ., Applet, implements, MouseListener, ,, MouseMotionListener, ,, ComponentListener","4","7","4","","","15"},
//                              {"55","    private int mx, my;","private,","1","","1","","","2"},
//                              {"56","    private Dimension size;","private","1","","","","","1"},
//                              {"57","    private int onaroll;","private","1","","","","","1"},
//                              {"58","    public void init() {","public,void, init( )","2","1","","","","3"},
//                              {"59","         onaroll = 0;","onaroll, =,  0","","1","1","1","","3"},
//                              {"60","        setSize(500, 500);","setSize( ), 500,  ,,  500)","","1","1","2","","4"},
//                              {"11","        size = getSize();","size, =,  getSize( )","","2","1","","","3"},
//                              {"12","        addMouseListener(this);","addMouseListener( ), this","1","1","","","","2"},
//                              {"13","        addMouseMotionListener(this);","addMouseMotionListener( ), this","1","1","","","","2"},
//                              {"14","        addComponentListener(this);","addComponentListener( ), this","1","1","","","","2"},
//                              {"15","    }","","","","","","","0"},
//                              {"16","    public void update(Graphics g) {","addComponentListener( ), this","2","1","","","","3"},
//                              {"17","        Dimension newSize = getSize();"," =,  getSize( )","","1","1","","","2"},
//                              {"18","        if (size.equals(newSize)) {   // Erase old box","size, ., equals( ), newSize","","3","1","","","4"},
//                              {"19","            g.setColor(getBackground());","g, ., setColor( ), getBackground( )","","3","1","","","4"},
//                              {"20","            g.drawRect(mx, my, (size.width / 10) - 1, (size.height / 10) - 1);","g, ., drawRect( ), mx, ,, my, ,, size, ., width, /, 10,  -,  1,   ,,   size,  .,  height,   /,  10,  -, 1","","8","10","4","","22"},
//                              {"21","        } else {","else","1","","","","","1"},
//                              {"22","            size = newSize;","size, =,  newSize","","2","1","","","3"},
//                              {"23","            g.clearRect(0, 0, size.width, size.height);}","g,  ., clearRect( ),  0,  ,, 0,  ,,  size, ., width,  ,,  size , .,  height","","6","6","2","","14"},
//                              {"24","        // Calculate new position","","","","","","","0"},
//                              {"25","        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));","mx, =,  Math, ., random( ), *, 1000,  % , size, ., width, -, size, ., width, /, 10","","7","8","2","","17"},
//                              {"26","        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));","mx, =,  Math, ., random( ), *, 1000,  % , size, ., height, -, size, ., height, /, 10","","7","8","2","","17"},
//                              {"27","        paint(g);","paint( ),  g","","2","","","","2"},
//                              {"28","   }","","","","","","","0"},
//                              {"29","    public void paint(Graphics g) {","public, void,  paint","2","1","","","","3"},
//                              {"30","        g.setColor(Color.black);","g,  .,  setColor( ), Color, ., black","","4","2","","","6"},
//                              {"31","        g.drawRect(0, 0, size.width - 1, size.height - 1);","g,  .,  drawRect( ),  0,  ,,  0, size,  ., width,  -, 1, ,, size,  .,  height,   -,  1","","6","8","4","","18"},
//                              {"32","        g.drawRect(mx, my, (size.width / 10) - 1, (size.height / 10) - 1);","g,  .,  drawRect( ), mx, ,,  my,  ,,  size,  .,  width,  /,  10,  -,  1,  ,,  size,  .,  height,   /,  10,  -, 1","","8","10","4","","22"},
//                              {"33","   }","}","","","","","","0"},
//                              {"34","    public void mouseDragged(MouseEvent e) {}","public, void,  mouseDragged( )","2","1","","","","3"},
//                              {"35","    public void mouseMoved(MouseEvent e) {","public, void,  mouseMoved( )","2","1","","","","3"},
//                              {"36","        e.consume();","e,  .,  consume( )","","2","1","","","3"},
//                              {"37","        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {","e,  .,  getX( ),   %,  3,  ==,  0,  &&,  e,  .,  getY( ),  %,  3,  ==,  0","","4","7","4","","15"},
//                              {"38","            repaint();","repaint( )","","1","","","","1"},
//                              {"39","        }}","","","","","","","0"},
//                              {"40","    public void mousePressed(MouseEvent e) {","public, void, mousePressed( )","2","1","","","","3"},
//                              {"41","        int x = e.getX()"," =,  e,  .,  getX( )","","2","2","","","4"},
//                              {"42","       int y = e.getY()"," =,  e,  .,  getY( )","","2","2","","","4"},
//                              {"43","        e.consume();","e,  .,  consume( )","","2","1","","","3"},
//                              {"44","        requestFocus();","requestFocus( )","","1","","","","1"},
//                              {"45","        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) { //determine if hit","mx,  <,  x,  &&,  x, <,  mx,  +,  getSize( ),  ., width,  /, 10, -, 1, &&, my, <,  y, &&,  y, <, my, +, getSize( ),  ., height,  /,  10,  -, 1","","12","15","4","","31"},
//                              {"46","            if (onaroll > 0) {   //not first hit","onaroll,  >,  0","","1","1","1","","3"},
//                              {"47","               switch (onaroll%4) {   //play a sound","onaroll,  %,  4","","1","1","1","","3"},
//                              {"48","                case 0:","0","","","","1","","1"},
//                              {"49","                    play(getCodeBase(), \"sounds/tiptoe.thru.the.tulips.au\");","play( ),  getCodeBase( ),  ,,  \"sounds/tiptoe.thru.the.tulips.au\"","","2","1","","1","4"},
//                              {"50","                    break;","break","1","","","","","1"},
//                              {"1","import java.awt.event.*;","","","","","","0"},
//                              {"2","import java.awt.*;","","","","","","","0"},
//                              {"3","","","","","","","",""},
//                              {"4","    public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {","public, class, JumpingBox, extends, java, ., applet, ., Applet, implements, MouseListener, ,, MouseMotionListener, ,, ComponentListener","4","7","4","","","15"},
//                              {"5","    private int mx, my;","private,","1","","1","","","2"}
//                            
//                              
//        };
        model.setDataVector(data, cols);
    }
    
    
    
    
    
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:;
//        ShowData();
        
// JFileChooser chooser = new JFileChooser();
//         chooser.showOpenDialog(null);
//         File f =chooser.getSelectedFile();
            String file=f.getAbsolutePath();
         
         
        try {
            //File file=new File("Demo.txt");    //creates a new file instance
            FileReader reader = new FileReader(file); //reads the file  
            BufferedReader br=new BufferedReader(reader);  //creates a buffering character input stream  
            StringBuffer sb=new StringBuffer();    //constructs a string buffer with no characters  
            String line; 
             int Linecount = 0;
             
             
            while((line=br.readLine())!=null)  
            {   
               // String IdentifiedTokensoperator = "";
                String IdentifiedTokens ="";
                Linecount = Linecount + 1;
                sb.append(Linecount);
                sb.append(line);      //appends line to string buffer  
                sb.append("\n");     //line feed   
                
                IdentifiedTokens = GetTokenkeyword(line);
               // IdentifiedTokensoperator = GetTokenoperator (line);
                        
                        
                String CountL = Integer.toString(Linecount);
                String [][] showLine = {{CountL,line,IdentifiedTokens}};
                ShowData(showLine);
                
//                String[][] salutation = { {"Mr. ", "Mrs. ", "Ms. "}, {"Kumar"} };

            }  
            
                 //return line= line +1;
                reader.close();    //closes the stream and release the resources  
//                System.out.println("Contents of File: ");  
//                System.out.println(sb.toString());   //returns a string that textually represents the object  
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Size.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Size.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton10ActionPerformed

    public String GetTokenkeyword(String line)
    {
        String IdentifiedTokens = "";
//        int Count = 0;
        if(line.contains("class"))
        {
            IdentifiedTokens = IdentifiedTokens + "Class, ";
//            Count = Count+1;
        }
        if(line.contains("public"))
        {
            IdentifiedTokens = IdentifiedTokens + "public, ";
//            Count = Count+1;
        }
        if(line.contains("void"))
        {
            IdentifiedTokens = IdentifiedTokens + "void, ";
//            Count = Count+1;
        }
        if(line.contains("true"))
        {
            IdentifiedTokens = IdentifiedTokens + "true, ";
//            Count = Count+1;
        }
        if(line.contains("else"))
        {
            IdentifiedTokens = IdentifiedTokens + "else, ";
//            Count = Count+1;
        }
        if(line.contains("default"))
        {
            IdentifiedTokens = IdentifiedTokens + "default, ";
//            Count = Count+1;
        }
         if(line.contains("return"))
        {
            IdentifiedTokens = IdentifiedTokens + " return, ";
//            Count = Count+1;
        }
          if(line.contains("null"))
        {
            IdentifiedTokens = IdentifiedTokens + "null, ";
//            Count = Count+1;
        }
           if(line.contains("break"))
        {
            IdentifiedTokens = IdentifiedTokens + "break, ";
//            Count = Count+1;
        }
            if(line.contains("this"))
        {
            IdentifiedTokens = IdentifiedTokens + "this, ";
//            Count = Count+1;
        }
             if(line.contains("+"))
        {
            IdentifiedTokens = IdentifiedTokens + " + , ";
//            Count = Count+1;
        }
        if(line.contains("-"))
        {
            IdentifiedTokens = IdentifiedTokens + " -, ";
//            Count = Count+1;
        }
        if(line.contains("*"))
        {
            IdentifiedTokens = IdentifiedTokens + " *, ";
//            Count = Count+1;
        }
        if(line.contains("/"))
        {
            IdentifiedTokens = IdentifiedTokens + " /, ";
//            Count = Count+1;
        }
        if(line.contains("%"))
        {
            IdentifiedTokens = IdentifiedTokens + " %, ";
//            Count = Count+1;
        }
        if(line.contains("++"))
        {
            IdentifiedTokens = IdentifiedTokens + " ++, ";
//            Count = Count+1;
        }
        if(line.contains("--"))
        {
            IdentifiedTokens = IdentifiedTokens + " --, ";
//            Count = Count+1;
        }
        if(line.contains("==")&& line.contains("!=") && line.contains(">") && line.contains("<")&& line.contains(">=")&& line.contains("<=") )
        {
            IdentifiedTokens = IdentifiedTokens + " ==,!=,> , < , >= ,<= ";
//            Count = Count+1;
        }
//        if(line.contains("!="))
//        {
//            IdentifiedTokens = IdentifiedTokens + " !=, ";
////            Count = Count+1;
////        }
//        if(line.contains(">"))
//        {
//            IdentifiedTokens = IdentifiedTokens + " >, ";
////            Count = Count+1;
//        }
//        if(line.contains("<"))
//        {
//            IdentifiedTokens = IdentifiedTokens + " <, ";
////            Count = Count+1;
////        }
//        if(line.contains("-"))
//        {
//            IdentifiedTokens = IdentifiedTokens + " -, ";
////            Count = Count+1;
//        }
//        if(line.contains(">="))
//        {
//            IdentifiedTokens = IdentifiedTokens + " >=, ";
////            Count = Count+1;
//        }
//        if(line.contains("<="))
//        {
//            IdentifiedTokens = IdentifiedTokens + " <=, ";
////            Count = Count+1;
//        }
//        
        
        return IdentifiedTokens;
    }
    
    
//     public String GetTokenoperator(String line)
//    {
//        String IdentifiedTokensoperator = "";
////        int Count = 0;
//        if(line.contains("+"))
//        {
//            IdentifiedTokensoperator = IdentifiedTokensoperator + " + , ";
////            Count = Count+1;
//        }
//        if(line.contains("-"))
//        {
//            IdentifiedTokensoperator = IdentifiedTokensoperator + " -, ";
////            Count = Count+1;
//        }
//        if(line.contains("void"))
//        {
//            IdentifiedTokens = IdentifiedTokens + "void, ";
////            Count = Count+1;
//        }
//        if(line.contains("true"))
//        {
//            IdentifiedTokens = IdentifiedTokens + "true, ";
////            Count = Count+1;
//        }
//        if(line.contains("else"))
//        {
//            IdentifiedTokens = IdentifiedTokens + "else, ";
////            Count = Count+1;
//        }
//        if(line.contains("default"))
//        {
//            IdentifiedTokens = IdentifiedTokens + "default, ";
////            Count = Count+1;
//        }
//         if(line.contains("return"))
//        {
//            IdentifiedTokens = IdentifiedTokens + " return, ";
////            Count = Count+1;
//        }
//          if(line.contains("null"))
//        {
//            IdentifiedTokens = IdentifiedTokens + "null, ";
////            Count = Count+1;
//        }
//           if(line.contains("break"))
//        {
//            IdentifiedTokens = IdentifiedTokens + "break, ";
////            Count = Count+1;
//        }
//            if(line.contains("this"))
//        {
//            IdentifiedTokens = IdentifiedTokens + "this, ";
////            Count = Count+1;
//        }
        
        
//        return IdentifiedTokensoperator;
//    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Size.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Size.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Size.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Size.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Size().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
